브랜치 
	나뭇가지, 분기점
	원본을 기반으로 분리하여 작업할 수 있도록 도와준다

	항상 안전된 코드를 유지함과 더불어 실험적인 작업을 시도할 수 있다
	
	일종의 가상 폴더

Head 포인터
	가장 마지막에 커밋된 상태를 가리키는 지시자(저장공간)
	새롭게 커밋이 되거나, 수정 변경이 될 때 Head가 알고 있는 커밋을 보고 
	비교하면 속도가 빠르기 때문이다.

master 브랜치
	git에서 기본적으로 만들어지는 브랜치

git 로컬브랜치 만들기
	git branch 브랜치이름 커밋ID
		커밋 ID는 생략하면 마지막 커밋(Head)를 기점으로 새로운 브랜치가 생성

		브랜치 이름은 
		- . 으로는 시작할 수 없고
		띄어쓰기 불가능
		 ~ ^ ? * 특수문자 불가능
		이미 존재하는 브랜치 이름도 불가능

		git-flow기법을 참고하여 브랜치 이름을 짓는 것도 좋다

git branch 
	브랜치 항목보기, 브랜치 이름만 보이며 *이 표시가 있는 브랜치가 현재 내가 위치한 브랜치

git branch -v
	(-vervose) 브랜치명, 기준커밋, 커밋메세지

git checkout 이동할브랜치
git checkout - 이전 브랜치로 이동을 의미
	    해당 브랜치로 이동하며, commit이 완료되지 않으면 (스테이지에 남아있다)
	    다른 브랜치로 이동 불가

-b 옵션
	브랜치 생성과 이동을 동시에
	git checkout -b 브랜치명

github의 기본 브랜치 이름은 main이다 
git은 master임  
	따라서 보통은 깃허브에 연결할 때 git의 기본 브랜치인 master를 main으로 수정하여 사용한다. 
	 git branch -M main으로 변경
	현재 위치한 브랜치가 main으로 수정	

원격저장소로 로컬branch 전송하기
	git push -u 원격저장소별칭 브랜치이름

git remote show 원격저장소별칭
	원격저장소의 브랜치와 로컬브랜치 정보 확인

git push origin 브랜치 이름: 원격 저장소 브랜치 이름
	로컬브랜치와 원격저장소 브랜치가 서로 같다면 
	push할 때 혹은 pull할 때 생략 할 수 있지만
	이름이 다르면
		git push 원격저장소별칭 원격저장소브랜치명
	으로 생략하지 못하고 사용한다

git remote show 원격저장소 별칭
	해당 원격 저장소와 로컬 저장소 브랜치 정보를 확인

git branch -r 
	원격저장소 브랜치 확인

git branch -a
	원격 저장소 및 로컬저장소 브랜치 확인
	
git branch -vv 
	연결된 브랜치 정보 확인

깃허브에 새롭게 만들어진 브랜치를 로컬에 추가
	git branch 브랜치이름 원격저장소별칭/브랜치이름




	

		
	